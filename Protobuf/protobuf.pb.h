// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2eproto;
namespace protocol {
class Mensagem;
struct MensagemDefaultTypeInternal;
extern MensagemDefaultTypeInternal _Mensagem_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::Mensagem* Arena::CreateMaybeMessage<::protocol::Mensagem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class Mensagem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Mensagem) */ {
 public:
  inline Mensagem() : Mensagem(nullptr) {}
  ~Mensagem() override;
  explicit PROTOBUF_CONSTEXPR Mensagem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mensagem(const Mensagem& from);
  Mensagem(Mensagem&& from) noexcept
    : Mensagem() {
    *this = ::std::move(from);
  }

  inline Mensagem& operator=(const Mensagem& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mensagem& operator=(Mensagem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mensagem& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mensagem* internal_default_instance() {
    return reinterpret_cast<const Mensagem*>(
               &_Mensagem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Mensagem& a, Mensagem& b) {
    a.Swap(&b);
  }
  inline void Swap(Mensagem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mensagem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mensagem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mensagem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mensagem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Mensagem& from) {
    Mensagem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mensagem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Mensagem";
  }
  protected:
  explicit Mensagem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kRespMsgFieldNumber = 3,
    kNomeFieldNumber = 4,
    kConteudoFieldNumber = 5,
    kRespConteudoFieldNumber = 6,
    kIdFieldNumber = 1,
    kNum1FieldNumber = 7,
    kNum2FieldNumber = 8,
    kSomaFieldNumber = 9,
  };
  // optional string msg = 2;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // optional string resp_msg = 3;
  bool has_resp_msg() const;
  private:
  bool _internal_has_resp_msg() const;
  public:
  void clear_resp_msg();
  const std::string& resp_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resp_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resp_msg();
  PROTOBUF_NODISCARD std::string* release_resp_msg();
  void set_allocated_resp_msg(std::string* resp_msg);
  private:
  const std::string& _internal_resp_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resp_msg(const std::string& value);
  std::string* _internal_mutable_resp_msg();
  public:

  // optional string nome = 4;
  bool has_nome() const;
  private:
  bool _internal_has_nome() const;
  public:
  void clear_nome();
  const std::string& nome() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nome(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nome();
  PROTOBUF_NODISCARD std::string* release_nome();
  void set_allocated_nome(std::string* nome);
  private:
  const std::string& _internal_nome() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nome(const std::string& value);
  std::string* _internal_mutable_nome();
  public:

  // optional string conteudo = 5;
  bool has_conteudo() const;
  private:
  bool _internal_has_conteudo() const;
  public:
  void clear_conteudo();
  const std::string& conteudo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conteudo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conteudo();
  PROTOBUF_NODISCARD std::string* release_conteudo();
  void set_allocated_conteudo(std::string* conteudo);
  private:
  const std::string& _internal_conteudo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conteudo(const std::string& value);
  std::string* _internal_mutable_conteudo();
  public:

  // optional string resp_conteudo = 6;
  bool has_resp_conteudo() const;
  private:
  bool _internal_has_resp_conteudo() const;
  public:
  void clear_resp_conteudo();
  const std::string& resp_conteudo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resp_conteudo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resp_conteudo();
  PROTOBUF_NODISCARD std::string* release_resp_conteudo();
  void set_allocated_resp_conteudo(std::string* resp_conteudo);
  private:
  const std::string& _internal_resp_conteudo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resp_conteudo(const std::string& value);
  std::string* _internal_mutable_resp_conteudo();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional int32 num1 = 7;
  bool has_num1() const;
  private:
  bool _internal_has_num1() const;
  public:
  void clear_num1();
  int32_t num1() const;
  void set_num1(int32_t value);
  private:
  int32_t _internal_num1() const;
  void _internal_set_num1(int32_t value);
  public:

  // optional int32 num2 = 8;
  bool has_num2() const;
  private:
  bool _internal_has_num2() const;
  public:
  void clear_num2();
  int32_t num2() const;
  void set_num2(int32_t value);
  private:
  int32_t _internal_num2() const;
  void _internal_set_num2(int32_t value);
  public:

  // optional int32 soma = 9;
  bool has_soma() const;
  private:
  bool _internal_has_soma() const;
  public:
  void clear_soma();
  int32_t soma() const;
  void set_soma(int32_t value);
  private:
  int32_t _internal_soma() const;
  void _internal_set_soma(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.Mensagem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resp_msg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nome_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conteudo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resp_conteudo_;
    int32_t id_;
    int32_t num1_;
    int32_t num2_;
    int32_t soma_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Mensagem

// int32 id = 1;
inline void Mensagem::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Mensagem::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Mensagem::id() const {
  // @@protoc_insertion_point(field_get:protocol.Mensagem.id)
  return _internal_id();
}
inline void Mensagem::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Mensagem::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.Mensagem.id)
}

// optional string msg = 2;
inline bool Mensagem::_internal_has_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Mensagem::has_msg() const {
  return _internal_has_msg();
}
inline void Mensagem::clear_msg() {
  _impl_.msg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Mensagem::msg() const {
  // @@protoc_insertion_point(field_get:protocol.Mensagem.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Mensagem::set_msg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.Mensagem.msg)
}
inline std::string* Mensagem::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:protocol.Mensagem.msg)
  return _s;
}
inline const std::string& Mensagem::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void Mensagem::_internal_set_msg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* Mensagem::_internal_mutable_msg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* Mensagem::release_msg() {
  // @@protoc_insertion_point(field_release:protocol.Mensagem.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.msg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Mensagem::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.Mensagem.msg)
}

// optional string resp_msg = 3;
inline bool Mensagem::_internal_has_resp_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Mensagem::has_resp_msg() const {
  return _internal_has_resp_msg();
}
inline void Mensagem::clear_resp_msg() {
  _impl_.resp_msg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Mensagem::resp_msg() const {
  // @@protoc_insertion_point(field_get:protocol.Mensagem.resp_msg)
  return _internal_resp_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Mensagem::set_resp_msg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.resp_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.Mensagem.resp_msg)
}
inline std::string* Mensagem::mutable_resp_msg() {
  std::string* _s = _internal_mutable_resp_msg();
  // @@protoc_insertion_point(field_mutable:protocol.Mensagem.resp_msg)
  return _s;
}
inline const std::string& Mensagem::_internal_resp_msg() const {
  return _impl_.resp_msg_.Get();
}
inline void Mensagem::_internal_set_resp_msg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.resp_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* Mensagem::_internal_mutable_resp_msg() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.resp_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* Mensagem::release_resp_msg() {
  // @@protoc_insertion_point(field_release:protocol.Mensagem.resp_msg)
  if (!_internal_has_resp_msg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.resp_msg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resp_msg_.IsDefault()) {
    _impl_.resp_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Mensagem::set_allocated_resp_msg(std::string* resp_msg) {
  if (resp_msg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.resp_msg_.SetAllocated(resp_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resp_msg_.IsDefault()) {
    _impl_.resp_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.Mensagem.resp_msg)
}

// optional string nome = 4;
inline bool Mensagem::_internal_has_nome() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Mensagem::has_nome() const {
  return _internal_has_nome();
}
inline void Mensagem::clear_nome() {
  _impl_.nome_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Mensagem::nome() const {
  // @@protoc_insertion_point(field_get:protocol.Mensagem.nome)
  return _internal_nome();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Mensagem::set_nome(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.nome_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.Mensagem.nome)
}
inline std::string* Mensagem::mutable_nome() {
  std::string* _s = _internal_mutable_nome();
  // @@protoc_insertion_point(field_mutable:protocol.Mensagem.nome)
  return _s;
}
inline const std::string& Mensagem::_internal_nome() const {
  return _impl_.nome_.Get();
}
inline void Mensagem::_internal_set_nome(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.nome_.Set(value, GetArenaForAllocation());
}
inline std::string* Mensagem::_internal_mutable_nome() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.nome_.Mutable(GetArenaForAllocation());
}
inline std::string* Mensagem::release_nome() {
  // @@protoc_insertion_point(field_release:protocol.Mensagem.nome)
  if (!_internal_has_nome()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.nome_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nome_.IsDefault()) {
    _impl_.nome_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Mensagem::set_allocated_nome(std::string* nome) {
  if (nome != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.nome_.SetAllocated(nome, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nome_.IsDefault()) {
    _impl_.nome_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.Mensagem.nome)
}

// optional string conteudo = 5;
inline bool Mensagem::_internal_has_conteudo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Mensagem::has_conteudo() const {
  return _internal_has_conteudo();
}
inline void Mensagem::clear_conteudo() {
  _impl_.conteudo_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Mensagem::conteudo() const {
  // @@protoc_insertion_point(field_get:protocol.Mensagem.conteudo)
  return _internal_conteudo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Mensagem::set_conteudo(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.conteudo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.Mensagem.conteudo)
}
inline std::string* Mensagem::mutable_conteudo() {
  std::string* _s = _internal_mutable_conteudo();
  // @@protoc_insertion_point(field_mutable:protocol.Mensagem.conteudo)
  return _s;
}
inline const std::string& Mensagem::_internal_conteudo() const {
  return _impl_.conteudo_.Get();
}
inline void Mensagem::_internal_set_conteudo(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.conteudo_.Set(value, GetArenaForAllocation());
}
inline std::string* Mensagem::_internal_mutable_conteudo() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.conteudo_.Mutable(GetArenaForAllocation());
}
inline std::string* Mensagem::release_conteudo() {
  // @@protoc_insertion_point(field_release:protocol.Mensagem.conteudo)
  if (!_internal_has_conteudo()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.conteudo_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.conteudo_.IsDefault()) {
    _impl_.conteudo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Mensagem::set_allocated_conteudo(std::string* conteudo) {
  if (conteudo != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.conteudo_.SetAllocated(conteudo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.conteudo_.IsDefault()) {
    _impl_.conteudo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.Mensagem.conteudo)
}

// optional string resp_conteudo = 6;
inline bool Mensagem::_internal_has_resp_conteudo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Mensagem::has_resp_conteudo() const {
  return _internal_has_resp_conteudo();
}
inline void Mensagem::clear_resp_conteudo() {
  _impl_.resp_conteudo_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Mensagem::resp_conteudo() const {
  // @@protoc_insertion_point(field_get:protocol.Mensagem.resp_conteudo)
  return _internal_resp_conteudo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Mensagem::set_resp_conteudo(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.resp_conteudo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.Mensagem.resp_conteudo)
}
inline std::string* Mensagem::mutable_resp_conteudo() {
  std::string* _s = _internal_mutable_resp_conteudo();
  // @@protoc_insertion_point(field_mutable:protocol.Mensagem.resp_conteudo)
  return _s;
}
inline const std::string& Mensagem::_internal_resp_conteudo() const {
  return _impl_.resp_conteudo_.Get();
}
inline void Mensagem::_internal_set_resp_conteudo(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.resp_conteudo_.Set(value, GetArenaForAllocation());
}
inline std::string* Mensagem::_internal_mutable_resp_conteudo() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.resp_conteudo_.Mutable(GetArenaForAllocation());
}
inline std::string* Mensagem::release_resp_conteudo() {
  // @@protoc_insertion_point(field_release:protocol.Mensagem.resp_conteudo)
  if (!_internal_has_resp_conteudo()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.resp_conteudo_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resp_conteudo_.IsDefault()) {
    _impl_.resp_conteudo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Mensagem::set_allocated_resp_conteudo(std::string* resp_conteudo) {
  if (resp_conteudo != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.resp_conteudo_.SetAllocated(resp_conteudo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resp_conteudo_.IsDefault()) {
    _impl_.resp_conteudo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.Mensagem.resp_conteudo)
}

// optional int32 num1 = 7;
inline bool Mensagem::_internal_has_num1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Mensagem::has_num1() const {
  return _internal_has_num1();
}
inline void Mensagem::clear_num1() {
  _impl_.num1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t Mensagem::_internal_num1() const {
  return _impl_.num1_;
}
inline int32_t Mensagem::num1() const {
  // @@protoc_insertion_point(field_get:protocol.Mensagem.num1)
  return _internal_num1();
}
inline void Mensagem::_internal_set_num1(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.num1_ = value;
}
inline void Mensagem::set_num1(int32_t value) {
  _internal_set_num1(value);
  // @@protoc_insertion_point(field_set:protocol.Mensagem.num1)
}

// optional int32 num2 = 8;
inline bool Mensagem::_internal_has_num2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Mensagem::has_num2() const {
  return _internal_has_num2();
}
inline void Mensagem::clear_num2() {
  _impl_.num2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t Mensagem::_internal_num2() const {
  return _impl_.num2_;
}
inline int32_t Mensagem::num2() const {
  // @@protoc_insertion_point(field_get:protocol.Mensagem.num2)
  return _internal_num2();
}
inline void Mensagem::_internal_set_num2(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.num2_ = value;
}
inline void Mensagem::set_num2(int32_t value) {
  _internal_set_num2(value);
  // @@protoc_insertion_point(field_set:protocol.Mensagem.num2)
}

// optional int32 soma = 9;
inline bool Mensagem::_internal_has_soma() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Mensagem::has_soma() const {
  return _internal_has_soma();
}
inline void Mensagem::clear_soma() {
  _impl_.soma_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t Mensagem::_internal_soma() const {
  return _impl_.soma_;
}
inline int32_t Mensagem::soma() const {
  // @@protoc_insertion_point(field_get:protocol.Mensagem.soma)
  return _internal_soma();
}
inline void Mensagem::_internal_set_soma(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.soma_ = value;
}
inline void Mensagem::set_soma(int32_t value) {
  _internal_set_soma(value);
  // @@protoc_insertion_point(field_set:protocol.Mensagem.soma)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_2eproto
